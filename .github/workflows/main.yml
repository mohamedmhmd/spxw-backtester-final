name: Build Desktop Apps (Win EXE + macOS DMG/PKG signed & notarized)

on:
  workflow_dispatch: {}
  push:
    tags: ["v*"]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-14]   # add macos-13 for Intel builds
        python-version: ["3.13"]         # or "3.11" if you prefer
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel setuptools
          pip install -r requirements.txt "pyinstaller>=6.6" pyinstaller-hooks-contrib

      - name: Verify SciPy import
        run: python -c "import scipy,sys;print('SciPy',scipy.__version__,'Python',sys.version.split()[0])"

      # ---------- Windows build (.exe, onefile) ----------
      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path 'SPX_0DTE_Backtester_fixed.spec') {
            pyinstaller SPX_0DTE_Backtester_fixed.spec
          } else {
            pyinstaller --noconfirm --clean --windowed --onefile `
              --name SPX_0DTE_Backtester `
              --collect-submodules scipy --collect-data scipy `
              --collect-submodules numpy --collect-data numpy `
              --hidden-import=scipy._lib.messagestream `
              --hidden-import=PyQt6 `
              --hidden-import=matplotlib `
              --hidden-import=pandas `
              --hidden-import=aiohttp `
              main.py
          }

      - name: Upload artifact (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: SPX_0DTE_Backtester-Windows-${{ matrix.python-version }}
          path: dist/**
          if-no-files-found: error

      # ---------- macOS build (.app) ----------
      - name: Build (macOS .app)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          if [[ -f "SPX_0DTE_Backtester_fixed.spec" ]]; then
            pyinstaller SPX_0DTE_Backtester_fixed.spec || true
          fi
          if [[ ! -d "dist/SPX_0DTE_Backtester.app" ]]; then
            pyinstaller --noconfirm --clean --windowed \
              --name SPX_0DTE_Backtester \
              --collect-submodules scipy --collect-data scipy \
              --collect-submodules numpy --collect-data numpy \
              --hidden-import=scipy._lib.messagestream \
              --hidden-import=PyQt6 \
              --hidden-import=matplotlib \
              --hidden-import=pandas \
              --hidden-import=aiohttp \
              main.py
          fi

      # Import Developer ID certs (Application + Installer) into keychain
      - name: Import Apple signing certs
        if: runner.os == 'macOS'
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.MAC_CERT_P12 }}
          p12-password: ${{ secrets.MAC_CERT_PASSWORD }}

      # Codesign the .app (recursive, hardened runtime, timestamp)
      - name: Codesign .app
        if: runner.os == 'macOS'
        shell: bash
        env:
          SIGN_ID: ${{ secrets.MAC_SIGN_IDENTITY }}
        run: |
          codesign --deep --force --options runtime --timestamp \
            --sign "$SIGN_ID" "dist/SPX_0DTE_Backtester.app"
          codesign --verify --deep --strict --verbose=2 "dist/SPX_0DTE_Backtester.app"

      # Create a DMG from the .app
      - name: Package .app as DMG (macOS)
        if: runner.os == 'macOS'
        id: dmg
        shell: bash
        run: |
          ARCH="$(uname -m)"
          APP="dist/SPX_0DTE_Backtester.app"
          DMG="SPX_0DTE_Backtester-macOS-${ARCH}.dmg"
          hdiutil create -volname "SPX_0DTE_Backtester" -srcfolder "$APP" -ov -format UDZO "$DMG"
          echo "dmg=$DMG" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      # Notarize + staple the DMG (uses notarytool)
      - name: Notarize DMG
        if: runner.os == 'macOS'
        uses: GuillaumeFalourd/notary-tools@v1
        with:
          product_path: ${{ steps.dmg.outputs.dmg }}
          apple_id: ${{ secrets.NOTARIZE_APPLE_ID }}
          password: ${{ secrets.NOTARIZE_APP_PASSWORD }}
          team_id: ${{ secrets.NOTARIZE_TEAM_ID }}
          staple: 'true'

      # Build a signed PKG installer (single file to double-click)
      - name: Build signed PKG
        if: runner.os == 'macOS'
        id: pkg
        shell: bash
        env:
          INSTALLER_ID: ${{ secrets.MAC_INSTALLER_IDENTITY }}
        run: |
          ARCH="$(uname -m)"
          APP="dist/SPX_0DTE_Backtester.app"
          PKG="SPX_0DTE_Backtester-macOS-${ARCH}.pkg"
          productbuild --component "$APP" /Applications --sign "$INSTALLER_ID" "$PKG"
          echo "pkg=$PKG" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT

      # Notarize + staple the PKG
      - name: Notarize PKG
        if: runner.os == 'macOS'
        uses: GuillaumeFalourd/notary-tools@v1
        with:
          product_path: ${{ steps.pkg.outputs.pkg }}
          apple_id: ${{ secrets.NOTARIZE_APPLE_ID }}
          password: ${{ secrets.NOTARIZE_APP_PASSWORD }}
          team_id: ${{ secrets.NOTARIZE_TEAM_ID }}
          staple: 'true'

      - name: Upload artifacts (macOS DMG + PKG)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: SPX_0DTE_Backtester-macOS-${{ steps.dmg.outputs.arch }}-${{ matrix.python-version }}
          path: |
            ${{ steps.dmg.outputs.dmg }}
            ${{ steps.pkg.outputs.pkg }}
          if-no-files-found: error
